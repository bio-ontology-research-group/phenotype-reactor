swagger: "2.0"
info:
  description: "Documentation of the Phenomebrowser Web API for querying phenotype relations."
  version: "1.0.0"
  title: "Phenomebrowser Api"
  contact:
    email: "ali.syed@kaust.edu.sa"
host: "phenomebrowser.net"
basePath: "/api"
tags:
- name: "association"
  description: "Phenotype association with a biomedical concept"
- name: "associationset"
  description: "An associationset contains a collection of phenotype associations extracted from a dataset."
- name: "valueset"
  description: "A valueset contains a collection of entities from a lookup service in Phenomebrowser."
- name: "entity"
  description: "An entity contains a description about the concept from the database."
schemes:
- "http"
paths:
  /association:
    get:
      tags:
      - "association"
      summary: "Find associations"
      description: "Find associations by search criteria including concept, phenotype, type, evidence type and association set"
      operationId: "findAssociation"
      produces:
      - "application/json"
      parameters:
      - name: "concept"
        in: "query"
        description: "concept uri from databases such as omim, disease ontology etc. For example to search for dementia phenotypes, 
        we can search by URI 'http://purl.obolibrary.org/obo/DOID_1307' for dementia in disease ontology."
        required: false
        type: "string"
      - name: "phenotype"
        in: "query"
        description: "phenotype uri from ontologies such as hpo, mp. For example to search for phenotypes association, 
        we can search by class uri 'http://purl.obolibrary.org/obo/HP_0002060' for Abnormal cerebral morphology"
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "Specifies the type of phenotype association such as disease phenotypes or gene phenotypes."
        required: false
        type: "string"
        enum:
          - "http://phenomebrowser.net/Disease"
          - "http://phenomebrowser.net/Drug"
          - "http://phenomebrowser.net/Gene"
          - "http://phenomebrowser.net/Metabolite"
          - "http://phenomebrowser.net/Pathogen"
      - name: "evidence"
        in: "query"
        description: "Specifies the type of evidence associated with association such as 'evidence used in automatic assertion'."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
            - "http://purl.obolibrary.org/obo/ECO_0007824"
            - "http://purl.obolibrary.org/obo/ECO_0000305"
            - "http://purl.obolibrary.org/obo/ECO_0000251"
            - "http://purl.obolibrary.org/obo/ECO_0007669"
            - "http://purl.obolibrary.org/obo/ECO_0000501"
            - "http://purl.obolibrary.org/obo/ECO_0006016"
            - "http://purl.obolibrary.org/obo/ECO_0006018"
            - "http://purl.obolibrary.org/obo/ECO_0000033"
      - name: "phenotype"
        in: "query"
        description: "Specify associationset uris for filtering results by associationsets"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        "405":
          description: "Invalid input"
  /association/_mostsimilar:
    get:
      tags:
      - "association"
      summary: "Finds most similar entities"
      description: "Finds the most similar entities to the specified entity"
      operationId: "findMostSimilar"
      produces:
      - "application/json"
      parameters:
      - name: "concept"
        in: "query"
        description: "concept uri from databases such as omim, disease ontology etc. For example to search for dementia phenotypes, 
        we can search by URI 'http://purl.obolibrary.org/obo/DOID_1307' for dementia in disease ontology."
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "Specifies the type of similar entities."
        required: false
        type: "string"
        enum:
          - "http://phenomebrowser.net/Disease"
          - "http://phenomebrowser.net/Drug"
          - "http://phenomebrowser.net/Gene"
          - "http://phenomebrowser.net/Metabolite"
          - "http://phenomebrowser.net/Pathogen"
      responses:
        "405":
          description: "Invalid input"
  /association/matching-phenotypes:
    get:
      tags:
      - "association"
      summary: "Finds the matching phenotypes between the two concepts"
      description: "Finds the list of matching phenotypes between the two concepts."
      operationId: "findMatchingPhenotypes"
      produces:
      - "application/json"
      parameters:
      - name: "source"
        in: "query"
        description: "source concept uri from databases such as omim, disease ontology etc. "
        required: false
        type: "string"
      - name: "target"
        in: "query"
        description: "target concept uri from databases such as omim, disease ontology etc. "
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
  /association/matching-phenotype-superclasses:
    get:
      tags:
      - "association"
      summary: "Finds the matching phenotype superclasses between the two concepts"
      description: "Finds the list of matching phenotypes superclasses between the two concepts. It retreives the 
      list of phenotypes associated with source and target concepts. Then uses a distinct list of phenotypes from both concept to
      retrieve their matching superclasses from Aberowl"
      operationId: "findMatchingPhenotypesSuperclasses"
      produces:
      - "application/json"
      parameters:
      - name: "source"
        in: "query"
        description: "source concept uri from databases such as omim, disease ontology etc. "
        required: false
        type: "string"
      - name: "target"
        in: "query"
        description: "target concept uri from databases such as omim, disease ontology etc. "
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
  /associationset:
    get:
      tags:
      - "associationset"
      summary: "Finds the list of associationsets"
      description: "Finds the list of associationsets in Phenomebrowser knowledge base"
      operationId: "findAssociationset"
      produces:
      - "application/json"
      responses:
        "405":
          description: "Invalid input"
  /associationset/{identifier}:
    get:
      tags:
      - "associationset"
      summary: "Gets an associationset by its identifier"
      description: "Gets an associationset by its identifier"
      operationId: "getAssociationsetByIdentifier"
      produces:
      - "application/json"
      parameters:
      - name: "identifier"
        in: "path"
        description: "Associationset resource identifier (URI)"
        required: true
        type: "string"
      responses:
        "405":
          description: "Invalid input"
  /valueset:
    get:
      tags:
      - "valueset"
      summary: "Finds the list of valuesets"
      description: "Finds the list of valuesets"
      operationId: "findValueset"
      produces:
      - "application/json"
      responses:
        "405":
          description: "Invalid input"
  /entity/_startswith:
    get:
      tags:
      - "entity"
      summary: "Finds entities that starts with the given text."
      description: "Finds entities whose labels starts with the given text in search criteria"
      operationId: "findValueset"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "text term"
        required: true
        type: "string"
      - name: "valueset"
        in: "query"
        description: "valueset acronyms to filter searched entities by specified valuesets"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "pagesize"
        in: "integer"
        description: "page size"
        required: false
        type: "int"
      responses:
        "405":
          description: "Invalid input"
  /entity/_findbyiri:
    post:
      tags:
      - "entity"
      summary: "Finds entities that starts with the given text."
      description: "Finds entities whose labels starts with the given text in search criteria"
      operationId: "findValueset"
      produces:
      - "application/json"
      responses:
        "405":
          description: "Invalid input"
  /entity/_findgene:
    get:
      tags:
      - "entity"
      summary: "Finds entities that starts with the given text."
      description: "Finds entities whose labels starts with the given text in search criteria"
      operationId: "findValueset"
      produces:
      - "application/json"
      responses:
        "405":
          description: "Invalid input"
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Learn more about Phenomebrowser"
  url: "http://phenomebrowser.net"